{"version":3,"sources":["../../../src/web.ts"],"names":["directory"],"mappings":"gOAwBA,SAAS,EAAQ,GACb,IAAI,EAAQ,EAAK,MAAM,KAAK,QAAO,YAAI,MAAa,MAAT,KACvC,EAAqB,GAczB,OAZA,EAAI,SAAQ,YAED,OAAT,GACA,EAAS,OAAS,GACgB,OAAlC,EAAS,EAAS,OAAS,GAE3B,EAAS,MAEH,EAAG,KAAK,MAIX,EAAS,KAAK,KAEvB,SAAS,EAAa,EAAgB,GAClC,EAAO,EAAQ,GACf,EAAS,EAAQ,GACjB,IAAI,EAAS,EAAO,MAAM,KACtB,EAAS,EAAS,MAAM,KAE5B,OACA,IAAW,GACX,EAAO,OAAM,SAAC,EAAO,GAAR,OAAkB,IAAU,EAAO,MAIpD,IAAa,EAAb,YAAE,qBAAF,iBAAE,SAAF,IAAI,IAAJ,EAAI,4B,2BACF,WAAa,EACT,EAAJ,QAAU,OAEE,EAAJ,WAAuB,CAAC,MAAO,MAAO,UAJhD,EAAE,uBAAE,IAAJ,SAAI,MAAJ,WAAM,IAAN,wBAOE,aAAQ,IAAR,OAAQ,OAAR,sBAAU,OAAE,OAAZ,eAAc,KAAd,UACmB,IAAb,KAAK,IADX,yCAEW,KAAK,KAFF,KAAd,KAIQ,cAAe,OAJvB,sBAKU,KAAK,YAAY,0CALb,KAAd,2BAQS,IAAI,SAAqB,SAAC,EAAS,GACxC,IAAM,EAAU,UAAU,KAAK,EAAK,QAAS,EAAK,YAClD,EAAQ,gBAAkB,EAAc,UACxC,EAAQ,UAAY,WAClB,EAAK,IAAM,EAAQ,OACnB,EAAQ,EAAQ,SAElB,EAAQ,QAAU,kBAAM,EAAO,EAAQ,QACvC,EAAQ,UAAY,WAClB,QAAQ,KAAK,mBAjBL,KAAd,EAAc,IAAd,qCAPI,kBAAE,OAAR,8BAAI,IAAJ,YAAI,MAAJ,WAAM,IAAN,wBA6CE,WAAgB,EAAa,GAA7B,8EACQ,GAC8B,IAAlC,KAAK,WAAW,QAAQ,GAAc,YAAc,WAFxD,kBAGS,KAAK,SAAS,MAAK,SAAC,GACzB,OAAO,IAAI,SAAwB,SAAC,EAAS,GAC3C,IACM,EADqB,EAAK,YAAY,CAAC,eAAgB,GACvC,YAAY,eAC5B,EAAM,EAAM,GAAN,QAAK,YAAS,IAC1B,EAAI,UAAY,kBAAM,EAAQ,EAAI,SAClC,EAAI,QAAU,kBAAM,EAAO,EAAI,eATrC,gDA7CI,gBAAN,KAAQ,OAAR,8BAAI,IAAJ,iBAAI,MAAJ,WAAM,IAAN,wBA2DE,WACE,EACA,EACA,GAHF,8EAKQ,GAC8B,IAAlC,KAAK,WAAW,QAAQ,GAAc,YAAc,WANxD,kBAOS,KAAK,SAAS,MAAK,SAAC,GACzB,OAAO,IAAI,SAAwB,SAAC,EAAS,GAC3C,IAEM,EAFqB,EAAK,YAAY,CAAC,eAAgB,GAC5B,YAAY,eACpB,MAAM,GACzB,EAAM,EAAM,GAAN,QAAK,YAAS,IAC1B,EAAI,UAAY,kBAAM,EAAQ,EAAI,SAClC,EAAI,QAAU,kBAAM,EAAO,EAAI,eAdrC,gDA3DI,gBAAN,OAAQ,OAAR,8BAAI,IAAJ,UAAI,MA8EM,SACN,EACA,GAEM,WACQ,IAAZ,EAAwB,EAAQ,QAAQ,eAAgB,IAAM,GAC5D,EAAS,GAGP,YAFY,IAAd,IAAyB,GAAU,IAAM,GAC7B,KAAZ,IAAgB,GAAU,IAAM,GAC7B,IAvFX,CAAI,IAAJ,QAAI,MAAJ,WAAM,IAAN,wBA0FE,sGACkC,KAAK,SADvC,OACQ,EADR,OAEQ,EAAqB,EAAK,YAAY,CAAC,eAAgB,aAC/B,EAAG,YAAY,eACvC,QAJR,gDA1FI,kBAAE,OAAR,8BAAI,IAAJ,WAAI,MAAJ,WAAM,IAAN,wBAsGE,WAAe,GAAf,gFACQ,EAAe,KAAK,QAAQ,EAAQ,UAAW,EAAQ,MAD/D,SAIuB,KAAK,UAAU,MAAO,CAAC,IAJ9C,eAKgB,KADR,EAJR,8BAKiC,MAAM,wBALvC,gCAMS,CAAE,KAAM,EAAM,QAAU,EAAM,QAAU,KANjD,gDAtGI,gBAAN,GAAQ,OAAR,8BAAI,IAAJ,YAAI,MAAJ,WAAM,IAAN,wBAoHE,WAAgB,GAAhB,gGACQ,EAAe,KAAK,QAAQ,EAAQ,UAAW,EAAQ,MACvD,EAAO,EAAQ,KACf,EAAc,EAAQ,UAH9B,SAK+B,KAAK,UAAU,MAAO,CAAC,IALtD,YAKQ,EALR,SAM8C,cAAvB,EAAc,KANrC,qBAOU,oCAPV,cASQ,EAAW,EAAQ,SACnB,EAAa,EAAK,OAAO,EAAG,EAAK,YAAY,MAVrD,UAY6B,KAAK,UAAU,MAAO,CAAC,IAZpD,gBAasB,IAbtB,4BAeyB,KADf,EAAc,EAAW,QAAQ,IAAK,IAdhD,wBAgBY,EAAgB,EAAW,OAAO,GAhB9C,UAiBY,KAAK,MAAM,CACf,KAAM,EACN,UAAW,EAAQ,UACnB,UAAW,IApBnB,eAwBQ,EAAM,KAAK,MACX,EAAoB,CACxB,KAAM,EACN,OAAQ,EACR,KAAM,OACN,KAAM,EAAK,OACX,MAAO,EACP,MAAO,EACP,SAAU,GAAY,EAAK,QAAQ,MAAQ,EAAI,EAAK,MAAM,KAAK,GAAK,GAhCxE,UAkCQ,KAAK,UAAU,MAAO,CAAC,IAlC/B,iCAmCS,CACL,IAAK,EAAQ,OApCjB,iDApHI,gBAAN,GAAQ,OAAR,8BAAI,IAAJ,aAAI,MAAJ,WAAM,IAAN,wBAiKE,WAAiB,GAAjB,8FACQ,EAAe,KAAK,QAAQ,EAAQ,UAAW,EAAQ,MACzD,EAAO,EAAQ,KAEb,EAAa,EAAK,OAAO,EAAG,EAAK,YAAY,MAE7C,EAAM,KAAK,MACb,EAAQ,EAPd,SAS+B,KAAK,UAAU,MAAO,CAAC,IATtD,YASQ,EATR,SAU8C,cAAvB,EAAc,KAVrC,sBAWU,oCAXV,yBAa6B,KAAK,UAAU,MAAO,CAAC,IAbpD,gBAcsB,IAdtB,4BAgByB,KADf,EAAc,EAAW,QAAQ,IAAK,IAfhD,wBAiBY,EAAgB,EAAW,OAAO,GAjB9C,UAkBY,KAAK,MAAM,CACf,KAAM,EACN,UAAW,EAAQ,UACnB,WAAW,IArBnB,oBA0BwB,IAAlB,IACF,EAAO,EAAc,QAAU,EAC/B,EAAQ,EAAc,OAElB,EAAoB,CACxB,KAAM,EACN,OAAQ,EACR,KAAM,OACN,KAAM,EAAK,OACX,MAAO,EACP,MAAO,EACP,QAAS,GArCb,UAuCQ,KAAK,UAAU,MAAO,CAAC,IAvC/B,iDAjKI,gBAAN,GAAQ,OAAR,8BAAI,IAAJ,aAAI,MAAJ,WAAM,IAAN,wBAgNE,WAAiB,GAAjB,8EACQ,EAAe,KAAK,QAAQ,EAAQ,UAAW,EAAQ,MAD/D,SAGuB,KAAK,UAAU,MAAO,CAAC,IAH9C,eAIgB,IAJhB,6BAIiC,MAAM,wBAJvC,uBAKwB,KAAK,eAAe,YAAa,aAAc,CACnE,YAAY,KAAK,KANrB,UAQyB,IARzB,OAQc,OARd,uBAQkC,MAAM,wBARxC,yBAUQ,KAAK,UAAU,SAAU,CAAC,IAVlC,iDAhNI,gBAAN,GAAQ,OAAR,8BAAI,IAAJ,QAAI,MAAJ,WAAM,IAAN,wBAkOE,WAAY,GAAZ,8FACQ,EAAe,KAAK,QAAQ,EAAQ,UAAW,EAAQ,MACvD,EAAc,EAAQ,UACtB,EAAa,EAAK,OAAO,EAAG,EAAK,YAAY,MAE7C,GAAS,EAAK,MAAM,QAAU,IAAI,OAL1C,SAM6B,KAAK,UAAU,MAAO,CAAC,IANpD,cAMQ,EANR,gBAO+B,KAAK,UAAU,MAAO,CAAC,IAPtD,UAOQ,EAPR,OAQgB,IAAV,EARN,uBAQyB,MAAM,gCAR/B,gBASwB,IAAlB,EATN,uBAUU,MAAM,yCAVhB,WAWO,GAAyB,IAAV,QAA+B,IAAhB,EAXrC,uBAYU,MAAM,+BAZhB,YAcM,GAAyB,IAAV,QAA+B,IAAhB,EAdpC,wBAeU,EAAgB,EAAW,OAAO,EAAW,QAAQ,IAAK,IAfpE,UAgBU,KAAK,MAAM,CACf,KAAM,EACN,UAAW,EAAQ,UACnB,UAAW,IAnBjB,eAsBQ,EAAM,KAAK,MACX,EAAoB,CACxB,KAAM,EACN,OAAQ,EACR,KAAM,YACN,KAAM,EACN,MAAO,EACP,MAAO,GA7BX,UA+BQ,KAAK,UAAU,MAAO,CAAC,IA/B/B,iDAlOI,gBAAN,GAAQ,OAAR,8BAAI,IAAJ,QAAI,MAAJ,WAAM,IAAN,wBAwQE,WAAY,GAAZ,gGACU,EAA+B,EAA/B,KAAM,EAAyB,EAAzB,UAAW,EAAc,EAAd,UACnB,EAAmB,KAAK,QAAQA,EAAW,GAFnD,SAIuB,KAAK,UAAU,MAAO,CAAC,IAJ9C,eAMgB,KAFR,EAJR,8BAMiC,MAAM,0BANvC,UAQqB,cAAf,EAAM,KARZ,sBASU,MAAM,qCAThB,wBAW8B,KAAK,QAAQ,CAAE,OAAM,cAXnD,WAaqC,KAF7B,EAXR,QAaoB,MAAM,QAAiB,EAb3C,uBAcU,MAAM,uBAdhB,sBAgBsB,EAAc,OAhBpC,kEAgBa,EAhBb,QAiBU,EAjBV,UAiByB,EAjBzB,YAiBiC,GAjBjC,UAkB2B,KAAK,KAAK,CAAE,KAAM,EAAW,cAlBxD,WAmB0B,SAnB1B,OAmBiB,KAnBjB,kCAoBY,KAAK,WAAW,CAAE,KAAM,EAAW,cApB/C,iDAsBY,KAAK,MAAM,CAAE,KAAM,EAAW,YAAW,cAtBrD,kKA0BQ,KAAK,UAAU,SAAU,CAAC,IA1BlC,iEAxQI,gBAAN,GAAQ,OAAR,8BAAI,IAAJ,UAAI,MAAJ,WAAM,IAAN,wBA0SE,WAAc,GAAd,oFACQ,EAAe,KAAK,QAAQ,EAAQ,UAAW,EAAQ,MAD/D,SAGuB,KAAK,UAAU,MAAO,CAAC,IAH9C,UAGQ,EAHR,OAIuB,KAAjB,EAAQ,WAAyB,IAAV,EAJ7B,sBAKU,MAAM,0BALhB,uBAOkC,KAAK,eACnC,YACA,aACA,CAAC,YAAY,KAAK,KAVtB,cAOQ,EAPR,OAYQ,EAAQ,EAAQ,KAAI,YACxB,OAAO,EAAE,UAAU,EAAK,OAAS,MAbrC,kBAeS,CAAE,MAAO,IAflB,iDA1SI,gBAAN,GAAQ,OAAR,8BAAI,IAAJ,SAAI,MAAJ,WAAM,IAAN,wBAiUE,WAAa,GAAb,gFACQ,EAAe,KAAK,QAAQ,EAAQ,UAAW,EAAQ,MAD/D,SAGqB,KAAK,UAAU,MAAO,CAAC,IAH5C,eAIgB,KADV,EAHN,wCAKmB,KAAK,UAAU,MAAO,CAAC,EAAO,MALjD,OAKI,EALJ,uCAOS,CACL,KAAU,OAAL,QAAK,IAAL,OAAK,EAAL,EAAO,OAAQ,IARxB,gDAjUI,gBAAN,GAAQ,OAAR,8BAAI,IAAJ,OAAI,MAAJ,WAAM,IAAN,wBAkVE,WAAW,GAAH,IAAR,IAAQ,OAAR,sBAAU,OAAV,oCACQ,EAAe,KAAK,QAAQ,EAAQ,UAAW,EAAQ,MAD/D,SAGqB,KAAK,UAAU,MAAO,CAAC,IAH5C,eAIgB,KADV,EAHN,wCAKmB,KAAK,UAAU,MAAO,CAAC,EAAO,MALjD,OAKI,EALJ,sBAOgB,IAAV,EAPN,uBAOiC,MAAM,yBAPvC,iCASS,CACL,KAAM,EAAM,KACZ,KAAM,EAAM,KACZ,MAAO,EAAM,MACb,MAAO,EAAM,MACb,IAAK,EAAM,OAdf,iDAlVI,gBAAN,GAAQ,OAAR,8BAAI,IAAJ,SAAI,MAAJ,WAAM,IAAN,wBAyWE,WAAa,GAAb,0FACS,KAAK,MAAM,GAAS,IAD7B,gDAzWI,gBAAN,GAAQ,OAAR,8BAAI,IAAJ,OAAI,MAAJ,WAAM,IAAN,wBAkXE,WAAW,GAAX,0FACS,KAAK,MAAM,GAAS,IAD7B,gDAlXI,gBAAN,GAAQ,OAAR,8BAAI,IAAJ,qBAAI,MAAJ,WAAM,IAAN,wBAsXE,aAAQ,OAAR,sBAAU,OAAE,OAAZ,eAAc,KAAd,2BACS,CAAE,cAAe,YADZ,KAAd,EAAc,IAAd,gCAtXI,kBAAE,OAAR,8BAAI,IAAJ,mBAAI,MAAJ,WAAM,IAAN,wBA0XE,aAAQ,OAAR,sBAAU,OAAE,OAAZ,eAAc,KAAd,2BACS,CAAE,cAAe,YADZ,KAAd,EAAc,IAAd,gCA1XI,kBAAE,OAAR,8BAAI,IAAJ,QAAI,MAAJ,WAAM,IAAN,wBAoYU,WAAY,GAAJ,IAAR,uDAAQ,OAAR,sBAAU,OAAV,gCAAkC,EAAlC,gCACA,EAAgB,EAAhB,YACE,EAAuC,EAAvC,GAAI,EAAmC,EAAnC,KAAiB,EAAkB,EAA7B,UAEb,GAAO,EAJN,sBAKE,MAAM,qCALR,UASD,IACH,EAAc,GAGV,EAAW,KAAK,QAAQ,EAAe,GACvC,EAAS,KAAK,QAAQ,EAAa,GAGrC,IAAa,EAjBX,uDAqBF,EAAa,EAAU,GArBrB,uBAsBE,MAAM,wCAtBR,mCA4BU,KAAK,KAAK,CACtB,KAAM,EACN,UAAW,IA9BT,QA4BJ,EA5BI,8DAkCE,EAAmB,EAAG,MAAM,MACjB,MACX,EAAS,EAAiB,KAAK,OAGjC,EAAiB,OAAS,GAvC1B,kCAwC8B,KAAK,KAAK,CACxC,KAAM,EACN,UAAW,IA1CX,WA6C6B,cA7C7B,OA6CoB,KA7CpB,uBA8CM,IAAI,MAAM,6CA9ChB,YAoDF,GAAwB,cAAf,EAAM,KApDb,uBAqDE,IAAI,MAAM,4CArDZ,yBAyDgB,KAAK,KAAK,CAC9B,KAAM,EACN,UAAW,IA3DP,QAyDA,EAzDA,OA+DA,EA/DA,uCA+Da,WAAO,EAAc,EAAe,GAApC,gFACX,EAAmB,EAAK,QAAQ,EAAa,GADlC,SAEI,EAAK,UAAU,MAAO,CAAC,IAF3B,cAEX,EAFW,QAGX,MAAQ,EACd,EAAM,MAAQ,EAJG,SAKX,EAAK,UAAU,MAAO,CAAC,IALZ,2CA/Db,0DAuEA,EAAQ,EAAQ,MAAQ,EAAQ,MAAQ,KAAK,MAvE7C,KAyEE,EAAQ,KAzEV,OA2EC,SA3ED,QAyGC,cAzGD,0CA6EiB,KAAK,SAAS,CAC/B,KAAM,EACN,UAAW,IA/EX,WA6EI,EA7EJ,QAmFE,EAnFF,kCAoFM,KAAK,WAAW,CACpB,KAAM,EACN,UAAW,IAtFb,yBA2FI,KAAK,UAAU,CACnB,KAAM,EACN,UAAW,EACX,KAAM,EAAK,OA9FX,YAkGE,EAlGF,kCAmGM,EAAW,EAAI,EAAO,EAAQ,OAnGpC,8CA0GE,EA1GF,uBA2GM,MAAM,mDA3GZ,mCAgHM,KAAK,MAAM,CACf,KAAM,EACN,UAAW,EACX,WAAW,IAnHb,YAuHI,EAvHJ,kCAwHQ,EAAW,EAAI,EAAO,EAAQ,OAxHtC,oFAgIM,KAAK,QAAQ,CACjB,KAAM,EACN,UAAW,IAlIb,QA+HI,EA/HJ,OAoIA,MApIA,cAsIqB,GAtIrB,kEAsIS,EAtIT,kBAwIM,KAAK,MACT,CACE,KAAI,UAAK,EAAL,YAAa,GACjB,GAAE,UAAK,EAAL,YAAW,GACb,UAAW,EACX,eAEF,GA/IF,qJAoJE,EApJF,kCAqJM,KAAK,MAAM,CACf,KAAM,EACN,UAAW,IAvJb,iFApYJ,gBAAN,GAAQ,OAAR,gCAAI,IAAJ,YAAI,MA6BF,SAAiB,GACT,IACA,EADc,EAAM,OACH,OACf,EAAM,WAIN,EAAG,iBAAiB,SAAS,gBAC/B,EAAG,kBAAkB,eAET,EAAG,kBAAkB,cAAe,CAAE,QAAS,SACvD,YAAY,YAAa,cAxCvC,G,MAAmC,GAM1B,UAAS","file":"static/js/43.f546c642.chunk.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const data = options.data;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw 'The supplied path is a directory.';\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: now,\n            mtime: now,\n            content: !encoding && data.indexOf(',') >= 0 ? data.split(',')[1] : data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        // const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw 'The supplied path is a directory.';\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (occupiedEntry !== undefined) {\n            data = occupiedEntry.content + data;\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const names = entries.map(e => {\n            return e.substring(path.length + 1);\n        });\n        return { files: names };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        return this._copy(options, true);\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return;\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                // Write the file to the new location\n                await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename}`,\n                        to: `${to}/${filename}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n    }\n}\nFilesystemWeb._debug = true;\n//# sourceMappingURL=web.js.map"],"sourceRoot":""}